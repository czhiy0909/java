import java.util.Arrays;

/**
 * 排序算法总结
 * @author Administrator
 *
 */
public class Sort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
          int[] arr=new int[10];
          for(int i=0;i<arr.length;i++) {
        	  arr[i]=(int)(Math.random()*100);
          }
          System.out.println(Arrays.toString(arr));
         // bubbleSort(arr);
         // quickSort(arr, 0, arr.length-1);
         // insertSort(arr); 
         // shellSort(arr);
         // selectSort(arr);
            mergeSort(arr, 0, arr.length-1);
          System.out.println(Arrays.toString(arr));
	}
	
//**********************************************************************	
	//冒泡排序
	public static void bubbleSort(int[] arr) {
		for(int i=0;i<arr.length-1;i++) {
			for(int j=0;j<arr.length-1-i;j++) {
				if(arr[j]>arr[j+1]) {
					int temp=arr[j+1];
					arr[j+1]=arr[j];
					arr[j]=temp;
				}
			}
		}
	}
//**********************************************************************
    //快速排序
	public static void quickSort(int[] arr,int start,int end) {
		// TODO Auto-generated method stub
            if(start<end) { 
            	int stard=arr[start];
            	int low=start;
            	int high=end;
         while(low<high) {
            	while(low<high&&arr[high]>=stard) high--;
            	arr[low]=arr[high];
            	while(low<high&&arr[low]<=stard) low++;
            	arr[high]=arr[low];
            	arr[low]=stard;
          }
         quickSort(arr, start, low);
         quickSort(arr, low+1, end);
       }
	}

//**********************************************************************
	//插入排序
	public static void insertSort(int[] arr) {
		 for(int i=1;i<arr.length;i++) {
			 for(int j=i;j>0;j--) {
				 if(arr[j]<arr[j-1]) {
					 int temp=arr[j];
					 arr[j]=arr[j-1];
					 arr[j-1]=temp;
				 }
			 }
		 }
	}
	
//**********************************************************************
	//希尔排序
	public static void shellSort(int[] arr) {
		//设置步长
		for(int d=arr.length/2;d>0;d/=2) {
			for(int i=d;i<arr.length;i++) {
				for(int j=i-d;j>=0;j-=d) {
					if(arr[j]>arr[j+d]) {
						int temp=arr[j];
						arr[j]=arr[j+d];
						arr[j+d]=temp;		
					}
				}
			}
		}
	}
	
//**********************************************************************
	//选择排序
	public static void selectSort(int[] arr) {
		for(int i=0;i<arr.length;i++) {
			for(int j=i+1;j<arr.length;j++) {
				if(arr[i]>arr[j]) {
					int temp=arr[i];
					arr[i]=arr[j];
					arr[j]=temp;
				}
			}
		}
	}
//**********************************************************************
	//归并排序
	public static void mergeSort(int[] arr,int low,int high) {
		int mid=(low+high)/2;
		if(low<high) {
			mergeSort(arr, low, mid);
			mergeSort(arr, mid+1, high);
			merge(arr, low, mid, high);
		}
	}
	public static void merge(int[] arr,int low,int mid,int high) {
		int[] temp=new int[high-low+1];
		int i=low;
		int j=mid+1;
		int k=0;
		//把较小的数先移到数组中
		while(i<=mid&&j<=high) {
			if(arr[i]<arr[j]) {
				temp[k++]=arr[i++];
			}else {
				temp[k++]=arr[j++];
			}
		}
		//把左边剩余的数组移入数组
		while(i<=mid) {
			temp[k++]=arr[i++];
		}
		//把右边剩余的数移入数组
		while(j<=high) {
			temp[k++]=arr[j++];
		}
		//把新数组中的数覆盖数组
		for(int x=0;x<temp.length;x++) {
			arr[x+low]=temp[x];
		}
	}
}